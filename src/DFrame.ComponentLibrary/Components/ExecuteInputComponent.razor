<div>
    <table class="table">
        <tbody>
            <tr>
                <td>HostAddress</td>
                <td><input @bind="HostAddress" placeholder="localhost"></td>
            </tr>
            <tr>
                <td>processCount</td>
                <td><input @bind="ExecuteData.ProcessCount" placeholder="1" type="number"></td>
            </tr>
            <tr>
                <td>workerPerProcess</td>
                <td><input @bind="ExecuteData.WorkerPerProcess" placeholder="20" type="number"></td>
            </tr>
            <tr>
                <td>executePerWorker</td>
                <td><input @bind="ExecuteData.ExecutePerWorker" placeholder="500" type="number"></td>
            </tr>
            <tr>
                <td>workerName</td>
                <td><input @bind="ExecuteData.WorkerName" placeholder="SampleWorker"></td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="ClickExecute" disabled="@disabledExecute">Execute</button>
    <button class="btn btn-primary" @onclick="ClickStop" disabled="@disabledStop">Stop</button>
</div>

@code {
    [Parameter] public string HostAddress { get; set; }
    [Parameter] public ExecuteData ExecuteData { get; set; }
    [Parameter] public string Status { get; set; }
    [Parameter] public Func<string, ExecuteData, Task> OnClickExecute { get; set; }
    [Parameter] public Func<Task> OnClickStop { get; set; }
    private bool disabledExecute => DisabledExecute();
    private bool disabledStop => DisabledStop();

    private async Task ClickExecute()
    {
        await OnClickExecute?.Invoke(HostAddress, ExecuteData);
    }

    private async Task ClickStop()
    {
        await OnClickStop?.Invoke();
    }

    private bool DisabledExecute()
    {
        return string.IsNullOrWhiteSpace(HostAddress)
            || ExecuteData.ProcessCount <= 0
            || ExecuteData.WorkerPerProcess <= 0
            || ExecuteData.ExecutePerWorker <= 0
            || string.IsNullOrWhiteSpace(ExecuteData.WorkerName)
            || Status == "RUNNING";
    }

    private bool DisabledStop()
    {
        return Status == null || Status == "STOP";
    }
}
