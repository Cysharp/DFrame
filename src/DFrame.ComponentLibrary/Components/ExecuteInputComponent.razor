@using Microsoft.AspNetCore.Components.Forms
@using DFrame.ComponentLibrary.Components.Execute

<div>
    <EditForm Model="ExecuteData">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>HostAddress</p>
        <input @bind-value="ExecuteData.HostAddress" placeholder="localhost">
        <br />

        <p>Mode</p>
        <InputSelectEnum @bind-Value="ExecuteData.Mode" />
        <br />

        <p>workloadName</p>
        <input @bind-value="ExecuteData.WorkloadName" placeholder="SampleWorkload">
        <br />

        <p>workerCount</p>
        <input @bind-value="ExecuteData.WorkerCount" placeholder="1" type="number">
        <br />

        @if (ExecuteData.Mode == ExecuteMode.Request)
        {
            <RequestInputComponent RequestData="@ExecuteData.Request" />
        }
        else if (ExecuteData.Mode == ExecuteMode.Rampup)
        {
            <RampupInputComponent RampupData="@ExecuteData.Rampup" />
        }

        <button type="submit" class="btn btn-primary" @onclick="ClickExecute" disabled="@disabledExecute">Execute</button>
        <button class="btn btn-primary" @onclick="ClickStop" disabled="@disabledStop">Stop</button>
    </EditForm>
</div>

@code {
    [Parameter] public ExecuteData ExecuteData { get; set; }
    [Parameter] public string Status { get; set; }
    [Parameter] public Func<ExecuteData, Task> OnClickExecute { get; set; }
    [Parameter] public Func<Task> OnClickStop { get; set; }
    private bool disabledExecute => DisabledExecute();
    private bool disabledStop => DisabledStop();

    private async Task ClickExecute()
    {
        await OnClickExecute?.Invoke(ExecuteData);
    }

    private async Task ClickStop()
    {
        await OnClickStop?.Invoke();
    }

    private bool DisabledExecute()
    {
        return !ExecuteData.IsExecutable || Status == "RUNNING";
    }

    private bool DisabledStop()
    {
        return Status == null || Status != "RUNNING";
    }
}
