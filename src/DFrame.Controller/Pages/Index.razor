@page "/"

<div class="w-full min-h-screen drawer drawer-end">

    <Drawer />

    <div class="drawer-content">

        <div class="flex px-3 pt-3 pb-1 relative">
            <a href="/Connections" class="contents">
                <div class="relative w-80 bg-base-200 p-4 font-bold rounded shadow text-center hover:bg-violet-700">
                    <div class="text-white text-[96px]">@vm.CurrentConnections</div>
                    <div class="text-slate-400">Worker connections</div>
                </div>
            </a>

            <div class="ml-2 w-full bg-base-200 rounded shadow">
                <div class="tabs p-4">
                    <a class="tab tab-bordered @(vm.TabActive(CommandMode.Request))" @onclick="() => vm.ChangeCommandMode(CommandMode.Request)">Request</a>
                    <a class="tab tab-bordered @(vm.TabActive(CommandMode.Repeat))" @onclick="() => vm.ChangeCommandMode(CommandMode.Repeat)">Repeat</a>
                    <a class="tab tab-bordered @(vm.TabActive(CommandMode.InfiniteLoop))" @onclick="() => vm.ChangeCommandMode(CommandMode.InfiniteLoop)">Infinite</a>
                </div>

                <div class="p-4">

                    <div class="form-control overflow-hidden">
                        <EditForm Model="@vm" OnSubmit=@HandleExecute>
                            <label class="input-group">
                                <span class="text-slate-300 min-w-[115px]">Workload</span>
                                <select class="select select-bordered select-sm leading-4" @onchange=vm.ChangeSelectedWorkload>
                                    @foreach (var item in vm.WorkloadInfos)
                                    {
                                        <option>@item.Name</option>
                                    }
                                </select>
                            </label>

                            <table class="ml-10">
                                @foreach (var item in vm.SelectedWorkloadParametes)
                                {
                                    <tr>
                                        <td class="pt-2">
                                            <label class="input-group input-group-sm">
                                                <span class="text-slate-300 w-full" style="border-radius: 0.25rem 0 0 0.25rem;">@item.TypeLabel @item.ParameterName</span>
                                            </label>
                                        </td>
                                        <td class="pt-2">
                                            @if (item.SelectableValues.Length != 0)
                                            {
                                                <select class="select select-bordered select-sm w-full max-w-xs py-0 leading-4" style="border-radius: 0 0.25rem 0.25rem 0;" @bind=item.Value>
                                                    @foreach (var name in item.SelectableValues)
                                                    {
                                                        <option>@name</option>
                                                    }
                                                </select>
                                            }
                                            else
                                            {
                                                <input type="text" class="input input-bordered input-sm text-slate-700 min-w-[260px] placeholder:italic placeholder:text-slate-400" style="border-radius: 0 0.25rem 0.25rem 0;" placeholder=@item.Hint @bind-value=item.Value />
                                            }
                                        </td>
                                    </tr>
                                }
                            </table>

                            <label class="input-group input-group-sm my-2">
                                <span class="text-slate-300 min-w-[115px]">Concurrency</span>
                                <input type="text" placeholder="Concurrent per worker." class="input input-bordered input-sm text-slate-700 placeholder:italic placeholder:text-slate-400" @bind-value=vm.Concurrency />
                            </label>

                            @if (vm.CommandMode == CommandMode.Request || vm.CommandMode == CommandMode.Repeat)
                            {
                                <label class="input-group input-group-sm my-2">
                                    <span class="text-slate-300 min-w-[115px]">TotalReuest</span>
                                    <input type="text" placeholder="Total request count." class="input input-bordered input-sm text-slate-700 placeholder:italic placeholder:text-slate-400" @bind-value=vm.TotalRequest />
                                </label>
                            }

                            <label class="input-group input-group-sm my-2 w-1/2">
                                <span class="text-slate-300 min-w-[115px]">WorkerLimit</span>
                                <input type="range" min="0" max="@vm.CurrentConnections" step=1 class="range range-sm mt-2 min-w-[172px]" value=@vm.RequestWorkerLimit @oninput=vm.ChangeWorkerLimitRange>
                                @if (vm.CurrentConnections == vm.RequestWorkerLimit)
                                {
                                    <span class="min-w-[48px] block text-center p-1 leading-3 text-xs" style="border-radius: 0.25rem;">No Limit</span>
                                }
                                else
                                {
                                    <span class="min-w-[48px] block text-center px-1" style="border-radius: 0.25rem;">@vm.RequestWorkerLimit</span>
                                }
                            </label>


                            @if (vm.CommandMode == CommandMode.Repeat)
                            {
                                <label class="input-group input-group-sm my-2">
                                    <span class="text-slate-300 min-w-[172px]">Increase TotalRequest</span>
                                    <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.IncreaseTotalReqeustCount />
                                </label>

                                <label class="input-group input-group-sm my-2">
                                    <span class="text-slate-300 min-w-[172px]">Increase Worker</span>
                                    <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.IncreaseWorkerCount />
                                </label>

                                <label class="input-group input-group-sm my-2">
                                    <span class="text-slate-300 min-w-[172px]">RepeatCount</span>
                                    <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.RepeatCount />
                                </label>
                            }

                            <div class="flex">
                                <div class="flex-none">
                                    @if (vm.CommandMode == CommandMode.Request || vm.CommandMode == CommandMode.Repeat)
                                    {
                                        @*TODO:change the button style from IsRunning*@
                                        <button class="btn btn-ghost rounded btn-active opacity-50" @onclick="HandleCancel">Cancel</button>
                                        <button class="btn btn-secondary rounded">Execute</button>
                                    }

                                    @if (vm.CommandMode == CommandMode.InfiniteLoop)
                                    {
                                        @*TODO:change the button style from IsRunning*@
                                        <button class="btn btn-ghost rounded btn-active opacity-50" @onclick="HandleCancel">Stop</button>
                                        <button class="btn btn-secondary rounded">Execute</button>
                                    }
                                </div>
                                <div class="grow">

                                </div>
                                <div class="flex-none">
                                    <ul class="list-none">
                                        <li>
                                            <a class="link link-accent" href="/History">Execute Results(@vm.ResultHistoryCount)</a>
                                        </li>
                                        <li>
                                            <a class="link link-accent" href="#">Server Logs</a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>

            </div>
        </div>

        <ExecutionResultTable IsRunning=vm.IsRunning ExecutionResults=vm.ExecutionResults ExecutionSummary=vm.ExecutionSummary />

    </div>


</div>