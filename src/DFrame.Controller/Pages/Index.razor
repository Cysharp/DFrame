@page "/"

@{
    // Console.WriteLine("Render Index");
}

<PageTitle>DFrame Controller</PageTitle>

<div class="w-full">

    <div class="flex">
        <div class="w-80 bg-base-200 p-4 font-bold rounded text-center">
            <div class="text-white text-[96px]">@vm.CurrentConnections</div>
            <div class="text-slate-400">Worker connections</div>
        </div>

        <div class="ml-2 w-full bg-base-200 rounded">
            <div class="tabs p-4">
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.Request))" @onclick="() => vm.ChangeCommandMode(CommandMode.Request)">Request</a>
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.Repeat))" @onclick="() => vm.ChangeCommandMode(CommandMode.Repeat)">Repeat</a>
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.InfiniteLoop))" @onclick="() => vm.ChangeCommandMode(CommandMode.InfiniteLoop)">Infinite</a>
            </div>

            <div class="p-4">

                <div class="form-control overflow-hidden">
                    <EditForm Model="@vm" OnSubmit=@HandleExecute>
                        <label class="input-group">
                            <span class="text-slate-300 min-w-[115px]">Workload</span>
                            <select class="select select-bordered select-sm w-full max-w-xs leading-4" @onchange=vm.ChangeSelectedWorkload>
                                @foreach (var item in vm.WorkloadInfos)
                                {
                                    <option>@item.Name</option>
                                }
                            </select>
                        </label>

                        @foreach (var item in vm.SelectedWorkloadParametes)
                        {
                            <label class="input-group input-group-sm my-2 ml-10">
                                <span class="text-slate-300">@item.TypeLabel @item.ParameterName</span>
                                @if (item.SelectableValues.Length != 0)
                                {
                                    <select class="select select-bordered select-sm w-full max-w-xs leading-4" @bind=item.Value>
                                        @foreach (var name in item.SelectableValues)
                                        {
                                            <option>@name</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <input type="text" class="input input-bordered input-sm text-slate-700" placeholder=@item.Hint @bind-value=item.Value />
                                }
                            </label>
                        }

                        <label class="input-group input-group-sm my-2">
                            <span class="text-slate-300 min-w-[115px]">Concurrency</span>
                            <input type="text" placeholder="Concurrent per worker." class="input input-bordered input-sm text-slate-700" @bind-value=vm.Concurrency />
                        </label>

                        @if (vm.CommandMode == CommandMode.Request || vm.CommandMode == CommandMode.Repeat)
                        {
                            <label class="input-group input-group-sm my-2">
                                <span class="text-slate-300 min-w-[115px]">TotalReuest</span>
                                <input type="text" placeholder="Total request count." class="input input-bordered input-sm text-slate-700" @bind-value=vm.TotalRequest />
                            </label>
                        }

                        <label class="input-group input-group-sm my-2">
                            <span class="text-slate-300 min-w-[115px]">WorkerLimit</span>
                            <input type="range" min="0" max="@vm.CurrentConnections" step=1 class="range" value=@vm.RequestWorkerLimit @oninput=vm.ChangeWorkerLimitRange>
                            @if(vm.CurrentConnections == vm.RequestWorkerLimit)
                            {
                                <span>No Limit</span>
                            }
                            else
                            {
                                <span>@vm.RequestWorkerLimit</span>
                            }
                        </label>

              
                        @if (vm.CommandMode == CommandMode.Repeat)
                        {
                            <label class="input-group input-group-sm my-2">
                                <span class="text-slate-300 min-w-[115px]">Increase TotalRequest</span>
                                <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.IncreaseTotalReqeustCount />
                            </label>

                            <label class="input-group input-group-sm my-2">
                                <span class="text-slate-300 min-w-[115px]">Increase Worker</span>
                                <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.IncreaseWorkerCount />
                            </label>

                            <label class="input-group input-group-sm my-2">
                                <span class="text-slate-300 min-w-[115px]">RepeatCount</span>
                                <input type="text" class="input input-bordered input-sm text-slate-700" @bind-value=vm.RepeatCount />
                            </label>
                        }

                        @if (vm.CommandMode == CommandMode.Request || vm.CommandMode == CommandMode.Repeat)
                        {
                            <div>
                                <button class="btn btn-ghost" type="button" @onclick="HandleCancel">Cancel</button>
                                <button class="btn btn-secondary btn-active" type="submit">Execute</button>
                            </div>
                        }

                        @if (vm.CommandMode == CommandMode.InfiniteLoop)
                        {
                            <div>
                                <button class="btn btn-ghost">Stop</button>
                                <button class="btn btn-secondary btn-active" type="submit">Execute</button>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>

        </div>
    </div>

    <div class="card shadow-lg rounded m-2">
        <div class="card-body p-4">
            @*TODO: Show results count => Executing results(@Number)*@
            <h2>Executing Results. IsRunning: @engine.IsRunning</h2>
        </div>
    </div>

    <table class="table w-full">
        <thead>
            <tr>
                <th>Status</th>
                <th>Succeed</th>
                <th>Error</th>
                <th>Max</th>
                <th>Min</th>
                <th>Avg</th>
                <th>Rps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in vm.ExecutionResults)
            {
                <tr class="hover">
                    <td>
                        @switch (item.ExecutionStatus)
                        {
                            case ExecutionStatus.Running:
                                <button aria-label="loading button" class="btn btn-ghost btn-sm btn-circle loading"></button>
                                break;
                            case ExecutionStatus.Failed:
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 mr-2 stroke-current text-red-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                break;
                            case ExecutionStatus.Succeed:
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 mr-2 stroke-current text-green-500">
                                    <path stroke="none" d="M0 0h24v24H0z" />
                                    <path stroke-width="3" d="M5 12l5 5l10 -10" />
                                </svg>
                                break;
                            case ExecutionStatus.Canceled:

                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-4 h-4 mr-2 stroke-current text-gray-200">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                break;
                        }
                    </td>
                    <td>@item.SucceedCount</td>
                    <td>@item.ErrorCount</td>
                    <td>@item.Max</td>
                    <td>@item.Min</td>
                    <td>@item.Avg</td>
                    <td>@item.CurrentRps</td>
                </tr>
            }
        </tbody>
    </table>

</div>