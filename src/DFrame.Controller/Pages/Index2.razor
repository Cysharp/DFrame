@page "/index2"

<PageTitle>DFrame Controller</PageTitle>

@{
    // Check selected workload on every state changed.
    if (vm.SelectedWorkload == null)
    {
        vm.SelectedWorkload = vm.WorkloadInfos.FirstOrDefault()?.Name;
    }
}

<div class="w-full">

    <div class="flex p-4 mx-4">
        <div class="w-80 bg-base-200 p-4 font-bold rounded-md">
            <div class="text-white text-[96px]">@vm.CurrentConnections</div>
            <div class="text-slate-400">Worker connections</div>
        </div>

        <div class="ml-2 w-full bg-base-200 rounded-md">
            <div class="tabs p-4">
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.Request))" @onclick="() => ChangeCommandMode(CommandMode.Request)">Request</a>
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.Repeat))" @onclick="() => ChangeCommandMode(CommandMode.Repeat)">Repeat</a>
                <a class="tab tab-bordered @(vm.TabActive(CommandMode.InfiniteLoop))" @onclick="() => ChangeCommandMode(CommandMode.InfiniteLoop)">Infinite</a>
            </div>

            <div class="p-4">
                
                <div class="form-control">
                <EditForm Model="@vm" OnSubmit=@HandleSubmit>
                    @if (vm.CommandMode == CommandMode.Request)
                    {
                        <label class="input-group">
                            <span class="text-slate-300 min-w-[115px]">Workload</span>
                            <select class="select select-bordered select-sm w-full max-w-xs leading-4" @bind=vm.SelectedWorkload>
                                @foreach (var item in vm.WorkloadInfos)
                                {
                                    <option>@item.Name</option>
                                }
                            </select>
                        </label>

                        @foreach (var item in vm.GetSelectedWorkloadParameters())
                        {
                            @*TODO:Handling Default EnumValue, DefaultValue, Placeholder for IsArray, bind-value*@
                            <label class="input-group input-group-sm my-2 ml-10">
                                <span class="text-slate-300">@item.GetTypeLabel() @item.ParameterName</span>
                                @if (item.ParameterType == AllowParameterType.Enum)
                                {
                                    <select class="select select-bordered select-sm w-full max-w-xs leading-4">
                                        @foreach (var name in item.EnumNames)
                                        {
                                            <option>@name</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <input type="text" class="input input-bordered input-sm text-slate-700" />
                                }
                            </label>
                        }

                        <label class="input-group input-group-sm my-2">
                            <span class="text-slate-300 min-w-[115px]">Concurrency</span>
                            <input type="text" placeholder="Concurrent per worker." class="input input-bordered input-sm text-slate-700" @bind-value=vm.Concurrency />
                        </label>

                        <label class="input-group input-group-sm my-2">
                            <span class="text-slate-300 min-w-[115px]">Total Reuest</span>
                            <input type="text" placeholder="Total request count." class="input input-bordered input-sm text-slate-700" @bind-value=vm.TotalRequest />
                        </label>
                        
                        <div>
                            <button class="btn btn-secondary btn-active" type="submit">Execute</button>
                            <button class="btn btn-ghost">Cancel</button>
                        </div>
                    }

                    @if (vm.CommandMode == CommandMode.Repeat)
                    {
                        <div>
                            <button class="btn btn-secondary btn-active" type="submit">Execute</button>
                            <button class="btn btn-ghost">Cancel</button>
                        </div>
                    }

                    @if (vm.CommandMode == CommandMode.InfiniteLoop)
                    {
                        
                        <div>
                            <button class="btn btn-secondary btn-active" type="submit">Execute</button>
                            <button class="btn btn-ghost">Cancel</button>
                        </div>
                    }

                </EditForm>
                 </div>
            </div>

        </div>
    </div>

    @*TODO: Show results count => Executing results(@Number)*@
    <h2>Executing Results. IsRunning: @ConnectionGroupContext.IsRunning</h2>

    <table class="table w-full">
        <thead>
            <tr>
                <th>Status</th>
                <th>Count</th>
                <th>Error</th>
                <th>Max</th>
                <th>Min</th>
                <th>Avg</th>
                <th>Rps</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in GetRunnningResults())
            {
                <tr class="hover">
                    <td>@item.ExecutionStatus</td>
                    <td>@item.SucceedCount</td>
                    <td>@item.Error</td>
                    <td>@item.Max</td>
                    <td>@item.Min</td>
                    <td>@item.Avg</td>
                    <td>@item.CurrentRps</td>
                </tr>
            }
        </tbody>
    </table>

</div>