@page "/execute"

@using DFrame.Web.Models
@inject ExecuteService ExecuteService
@inject ISummaryService SummaryService
@inject IStatisticsService StatisticsService

<h1>Execute</h1>

<div>
    <table class="table">
        <tbody>
            <tr>
                <td>HostAddress</td>
                <td><input @bind="hostAddress" placeholder="localhost"></td>
            </tr>
            <tr>
                <td>processCount</td>
                <td><input @bind="processCount" placeholder="1" type="number"></td>
            </tr>
            <tr>
                <td>workerPerProcess</td>
                <td><input @bind="workerPerProcess" placeholder="20" type="number"></td>
            </tr>
            <tr>
                <td>executePerWorker</td>
                <td><input @bind="executePerWorker" placeholder="500" type="number"></td>
            </tr>
            <tr>
                <td>workerName</td>
                <td><input @bind="workerName" placeholder="SampleWorker"></td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="OnClickExecute" disabled="@disableExecute">Execute</button>
    <button class="btn btn-primary" @onclick="OnClicStop" disabled="@disabledStop">Stop</button>

    <table class="table">
        <thead>
            <tr>
                <th>ExecuteId</th>
                <th>HostAddress</th>
                <th>Status</th>
                <th>Args</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@context?.ExecuteId</td>
                <td>@context?.HostAddress</td>
                <td>@context?.Status</td>
                <td>@context?.Arg</td>
            </tr>
        </tbody>
    </table>

</div>

@code {
    private string hostAddress;
    private int processCount = 1;
    private int workerPerProcess = 20;
    private int executePerWorker = 500;
    private string workerName;
    private bool disableExecute => DisableExecute();
    private bool disabledStop => DisableStop();
    private IExecuteContext context;

    protected override Task OnInitializedAsync()
    {
        context = ExecuteService.ExecuteContext;
        hostAddress = context?.HostAddress;
        workerName = context?.WorkerName;
        return Task.CompletedTask;
    }

    private async Task OnClickExecute()
    {
        await ExecuteService.ExecuteAsync(hostAddress, processCount, workerPerProcess, executePerWorker, workerName);
        context = ExecuteService.ExecuteContext;
    }

    private async Task OnClicStop()
    {
        await ExecuteService.StopAsync();
    }

    private bool DisableExecute()
    {
        return string.IsNullOrWhiteSpace(hostAddress)
            || processCount <= 0
            || workerPerProcess <= 0
            || executePerWorker <= 0
            || string.IsNullOrWhiteSpace(workerName)
            || context?.Status == "RUNNING";
    }

    private bool DisableStop()
    {
        return context == null || context?.Status == "STOP";
    }
}
